{"ast":null,"code":"var _s = $RefreshSig$();\n\n/** @format */\n// /** @format */\n// import React, { useState, useEffect, useRef } from \"react\";\n// import styled from \"styled-components\";\n// import ChatInput from \"./ChatInput\";\n// import Logout from \"./Logout\";\n// import axios from \"axios\";\n// import {\n// \tgetAllMessagesRoute,\n// \tsendMessageRoute,\n// \tallChats,\n// \tsendMessageGroup,\n// \tgroupchatmessage,\n// } from \"../utils/APIRoutes\";\n// import { v4 as uuidv4 } from \"uuid\";\n// export default function ChatContainer({\n// \tcurrentChat,\n// \tcurrentUser,\n// \tsocket,\n// \tgroupChatName,\n// \tactiveComponent,\n// }) {\n// \tconsole.log(`current chat :${JSON.stringify(currentChat)}`);\n// \t// console.log(`current user : ${JSON.stringify(currentUser)}`);\n// \tconst [messages, setMessages] = useState([]);\n// \tconst [arrivalMessage, setArrivalMessage] = useState(null);\n// \tconst [arrivalGroupMessage, setArrivalGroupMessage] = useState(null);\n// \tconst [groupmessages, setGroupmessages] = useState([]);\n// \tconst scrollRef = useRef();\n// \tuseEffect(() => {\n// \t\tconst fetchData = async () => {\n// \t\t\tif (currentChat) {\n// \t\t\t\tconst response = await axios.post(getAllMessagesRoute, {\n// \t\t\t\t\tfrom: currentUser._id,\n// \t\t\t\t\tto: currentChat._id,\n// \t\t\t\t});\n// \t\t\t\tsetMessages(response.data);\n// \t\t\t\tconsole.log(response);\n// \t\t\t\t//fetching single person chat Messages from db\n// \t\t\t\tconsole.log(\"chat message :\" + JSON.stringify(response.data));\n// \t\t\t}\n// \t\t};\n// \t\tfetchData();\n// \t}, [currentChat]);\n// \tuseEffect(() => {\n// \t\tconst fetchGroup = async () => {\n// \t\t\tif (currentChat) {\n// \t\t\t\tconst response = await axios.post(groupchatmessage, {\n// \t\t\t\t\tfrom: currentUser._id,\n// \t\t\t\t\tto: currentChat.name,\n// \t\t\t\t});\n// \t\t\t\tsetGroupmessages(response.data);\n// \t\t\t}\n// \t\t};\n// \t\tfetchGroup();\n// \t}, [currentChat]);\n// \tconsole.log(`group chat data :${JSON.stringify(groupmessages.messages)}`);\n// \tfor (let key in groupmessages) {\n// \t\tconsole.log(`message :${JSON.stringify(groupmessages.key)}`);\n// \t}\n// \tconst handleSendMsg = async (msg) => {\n// \t\tawait axios.post(sendMessageRoute, {\n// \t\t\tfrom: currentUser._id,\n// \t\t\tto: currentChat._id,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\tsocket.current.emit(\"send-msg\", {\n// \t\t\tto: currentChat._id,\n// \t\t\tfrom: currentUser._id,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\tconst msgs = [...messages];\n// \t\tconsole.log(`messages :${JSON.stringify(msgs)}`);\n// \t\tmsgs.push({\n// \t\t\tfromSelf: true,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\tsetMessages(msgs);\n// \t\t// post message to db and emitting server\n// \t\t//console.log(\"sent Message :\" + JSON.stringify(msgs));\n// \t};\n// \tconst handleGroupMsg = async (msg) => {\n// \t\tawait axios.post(sendMessageGroup, {\n// \t\t\tfrom: currentUser._id,\n// \t\t\tto: currentChat.name,\n// \t\t\tmessages: msg,\n// \t\t});\n// \t\tconst msgs = [...messages];\n// \t\tconsole.log(`messages :${JSON.stringify(msgs)}`);\n// \t\tmsgs.push({\n// \t\t\tfromSelf: true,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\tsetGroupmessages(msgs);\n// \t};\n// \tconsole.log(`group messages : ${groupmessages}`);\n// \tuseEffect(() => {\n// \t\tif (socket.current) {\n// \t\t\tsocket.current.on(\"msg-recieved\", (msg) => {\n// \t\t\t\tsetArrivalMessage({\n// \t\t\t\t\tfromSelf: false,\n// \t\t\t\t\tmessage: msg,\n// \t\t\t\t});\n// \t\t\t});\n// \t\t}\n// \t}, []);\n// \tuseEffect(() => {\n// \t\tarrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\n// \t}, [arrivalMessage]);\n// \tuseEffect(() => {\n// \t\tarrivalGroupMessage &&\n// \t\t\tsetGroupmessages((prev) => [...prev, arrivalGroupMessage]);\n// \t}, [arrivalGroupMessage]);\n// \tuseEffect(() => {\n// \t\tscrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n// \t}, [messages]);\n// \tconsole.log(`arrivalgroup message :${arrivalGroupMessage}`);\n// \tlet chats = false;\n// \t//console.log(\"Group chat name : \" + JSON.stringify(groupChatName));\n// \t// for (let key in groupChatName) {\n// \t// \tconsole.log(`groupchat Name : ${groupChatName[key].name}`);\n// \t// }\n// \t//console.log(JSON.stringify(messages));\n// \t//console.log(`current chat data :  ${JSON.stringify(currentChat)}`);\n// \treturn (\n// \t\t<>\n// \t\t\t{chats\n// \t\t\t\t? currentChat && (\n// \t\t\t\t\t\t<Container>\n// \t\t\t\t\t\t\t<div className=\"chat-header\">\n// \t\t\t\t\t\t\t\t<div className=\"user-details\">\n// \t\t\t\t\t\t\t\t\t<div className=\"avatar\">\n// \t\t\t\t\t\t\t\t\t\t<img\n// \t\t\t\t\t\t\t\t\t\t\tsrc={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\n// \t\t\t\t\t\t\t\t\t\t\talt=\"avatar\"\n// \t\t\t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t<div className=\"username\">\n// \t\t\t\t\t\t\t\t\t\t<h3>{currentChat.username}</h3>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t<Logout />\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<div className=\"chat-messages\">\n// \t\t\t\t\t\t\t\t{messages.map((message) => {\n// \t\t\t\t\t\t\t\t\treturn (\n// \t\t\t\t\t\t\t\t\t\t<div ref={scrollRef} key={uuidv4()}>\n// \t\t\t\t\t\t\t\t\t\t\t<div\n// \t\t\t\t\t\t\t\t\t\t\t\tclassName={`message ${\n// \t\t\t\t\t\t\t\t\t\t\t\t\tmessage.fromSelf ? \"sended\" : \"recieved\"\n// \t\t\t\t\t\t\t\t\t\t\t\t}`}>\n// \t\t\t\t\t\t\t\t\t\t\t\t<div className=\"content \">\n// \t\t\t\t\t\t\t\t\t\t\t\t\t<p>{message.message}</p>\n// \t\t\t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t);\n// \t\t\t\t\t\t\t\t})}\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<ChatInput handleSendMsg={handleSendMsg} />\n// \t\t\t\t\t\t</Container>\n// \t\t\t\t  )\n// \t\t\t\t: groupChatName && (\n// \t\t\t\t\t\t<Container>\n// \t\t\t\t\t\t\t<div className=\"chat-header\">\n// \t\t\t\t\t\t\t\t<div className=\"user-details\">\n// \t\t\t\t\t\t\t\t\t<div className=\"avatar\">\n// \t\t\t\t\t\t\t\t\t\t<img\n// \t\t\t\t\t\t\t\t\t\t\tsrc={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\n// \t\t\t\t\t\t\t\t\t\t\talt=\"avatar\"\n// \t\t\t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t<div className=\"username\">\n// \t\t\t\t\t\t\t\t\t\t<h3>{currentChat.name}</h3>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t<Logout />\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<div className=\"chat-messages\">\n// \t\t\t\t\t\t\t\t{Object.keys(groupmessages).map((message) => {\n// \t\t\t\t\t\t\t\t\treturn (\n// \t\t\t\t\t\t\t\t\t\t<div ref={scrollRef} key={uuidv4()}>\n// \t\t\t\t\t\t\t\t\t\t\t<div\n// \t\t\t\t\t\t\t\t\t\t\t\tclassName={`message ${\n// \t\t\t\t\t\t\t\t\t\t\t\t\tmessage.fromSelf ? \"sended\" : \"recieved\"\n// \t\t\t\t\t\t\t\t\t\t\t\t}`}>\n// \t\t\t\t\t\t\t\t\t\t\t\t<div className=\"content \">\n// \t\t\t\t\t\t\t\t\t\t\t\t\t<p>{groupChatName.message}</p>\n// \t\t\t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t);\n// \t\t\t\t\t\t\t\t})}\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<ChatInput handleGroupMsg={handleGroupMsg} />\n// \t\t\t\t\t\t</Container>\n// \t\t\t\t  )}\n// \t\t</>\n// \t);\n// }\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport ChatInput from \"./ChatInput\";\nimport Logout from \"./Logout\";\nimport axios from \"axios\";\nimport { getAllMessagesRoute, sendMessageRoute, allChats, sendMessageGroup, groupchatmessage } from \"../utils/APIRoutes\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatContainer(_ref) {\n  _s();\n\n  let {\n    currentChat,\n    currentUser,\n    socket,\n    groupChatName,\n    activeComponent\n  } = _ref;\n  const [message, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        //type - getAllMessagesRoute,\n        const response = await axios.post(`/api/${type}-chat-messages`);\n        setMessages(response.data);\n      } catch (err) {\n        setError(err);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchMessages();\n  }, [type]);\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"msg-recieved\", msg => {\n        setArrivalMessage({\n          fromSelf: false,\n          message: msg\n        });\n      });\n    }\n  }, []);\n\n  const handleMessageSubmit = async event => {\n    event.preventDefault();\n    const message = event.target.elements.message.value;\n\n    try {\n      const response = await axios.post(`/api/${type}-chat-messages`, {\n        user: currentUser,\n        message\n      });\n      setMessages([...messages, response.data]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(ChatContainer, \"uCddc69Tc1ocK5l4N2pyiOF0DZ0=\");\n\n_c = ChatContainer;\nconst Container = styled.div`\n\tdisplay: grid;\n\tgrid-template-rows: 10% 80% 10%;\n\tgap: 0.1rem;\n\toverflow: hidden;\n\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n\t\tgrid-template-rows: 15% 70% 15%;\n\t}\n\t.chat-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 0 2rem;\n\t\t.user-details {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 1rem;\n\t\t\t.avatar {\n\t\t\t\timg {\n\t\t\t\t\theight: 3rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t.username {\n\t\t\t\th3 {\n\t\t\t\t\tcolor: white;\n\t\t\t\t\ttext-transform: capitalize;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t.chat-messages {\n\t\tpadding: 1rem 2rem;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1rem;\n\t\toverflow: auto;\n\t\t&::-webkit-scrollbar {\n\t\t\twidth: 0.2rem;\n\t\t\t&-thumb {\n\t\t\t\tbackground-color: #ffffff39;\n\t\t\t\twidth: 0.1rem;\n\t\t\t\tborder-radius: 1rem;\n\t\t\t}\n\t\t}\n\t\t.message {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\t.content {\n\t\t\t\tmax-width: 40%;\n\t\t\t\toverflow-wrap: break-word;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tfont-size: 1.1rem;\n\t\t\t\tborder-radius: 1rem;\n\t\t\t\tcolor: #d1d1d1;\n\t\t\t\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n\t\t\t\t\tmax-width: 70%;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.sended {\n\t\t\tjustify-content: flex-end;\n\t\t\t.content {\n\t\t\t\tbackground-color: #4f04ff21;\n\t\t\t}\n\t\t}\n\t\t.recieved {\n\t\t\tjustify-content: flex-start;\n\t\t\t.content {\n\t\t\t\tbackground-color: #9900ff20;\n\t\t\t}\n\t\t}\n\t}\n`;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","ChatInput","Logout","axios","getAllMessagesRoute","sendMessageRoute","allChats","sendMessageGroup","groupchatmessage","v4","uuidv4","ChatContainer","currentChat","currentUser","socket","groupChatName","activeComponent","message","setMessages","isLoading","setIsLoading","error","setError","fetchMessages","response","post","type","data","err","current","on","msg","setArrivalMessage","fromSelf","handleMessageSubmit","event","preventDefault","target","elements","value","user","messages","console","Container","div"],"sources":["/Users/rajesh/Desktop/NewApp/chatapp/public/src/components/ChatContainer.jsx"],"sourcesContent":["/** @format */\n\n// /** @format */\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import styled from \"styled-components\";\n// import ChatInput from \"./ChatInput\";\n// import Logout from \"./Logout\";\n// import axios from \"axios\";\n// import {\n// \tgetAllMessagesRoute,\n// \tsendMessageRoute,\n// \tallChats,\n// \tsendMessageGroup,\n// \tgroupchatmessage,\n// } from \"../utils/APIRoutes\";\n// import { v4 as uuidv4 } from \"uuid\";\n\n// export default function ChatContainer({\n// \tcurrentChat,\n// \tcurrentUser,\n// \tsocket,\n// \tgroupChatName,\n// \tactiveComponent,\n// }) {\n// \tconsole.log(`current chat :${JSON.stringify(currentChat)}`);\n// \t// console.log(`current user : ${JSON.stringify(currentUser)}`);\n// \tconst [messages, setMessages] = useState([]);\n// \tconst [arrivalMessage, setArrivalMessage] = useState(null);\n// \tconst [arrivalGroupMessage, setArrivalGroupMessage] = useState(null);\n// \tconst [groupmessages, setGroupmessages] = useState([]);\n\n// \tconst scrollRef = useRef();\n\n// \tuseEffect(() => {\n// \t\tconst fetchData = async () => {\n// \t\t\tif (currentChat) {\n// \t\t\t\tconst response = await axios.post(getAllMessagesRoute, {\n// \t\t\t\t\tfrom: currentUser._id,\n// \t\t\t\t\tto: currentChat._id,\n// \t\t\t\t});\n// \t\t\t\tsetMessages(response.data);\n// \t\t\t\tconsole.log(response);\n// \t\t\t\t//fetching single person chat Messages from db\n// \t\t\t\tconsole.log(\"chat message :\" + JSON.stringify(response.data));\n// \t\t\t}\n// \t\t};\n// \t\tfetchData();\n// \t}, [currentChat]);\n\n// \tuseEffect(() => {\n// \t\tconst fetchGroup = async () => {\n// \t\t\tif (currentChat) {\n// \t\t\t\tconst response = await axios.post(groupchatmessage, {\n// \t\t\t\t\tfrom: currentUser._id,\n// \t\t\t\t\tto: currentChat.name,\n// \t\t\t\t});\n// \t\t\t\tsetGroupmessages(response.data);\n// \t\t\t}\n// \t\t};\n// \t\tfetchGroup();\n// \t}, [currentChat]);\n// \tconsole.log(`group chat data :${JSON.stringify(groupmessages.messages)}`);\n// \tfor (let key in groupmessages) {\n// \t\tconsole.log(`message :${JSON.stringify(groupmessages.key)}`);\n// \t}\n\n// \tconst handleSendMsg = async (msg) => {\n// \t\tawait axios.post(sendMessageRoute, {\n// \t\t\tfrom: currentUser._id,\n// \t\t\tto: currentChat._id,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\tsocket.current.emit(\"send-msg\", {\n// \t\t\tto: currentChat._id,\n// \t\t\tfrom: currentUser._id,\n// \t\t\tmessage: msg,\n// \t\t});\n\n// \t\tconst msgs = [...messages];\n// \t\tconsole.log(`messages :${JSON.stringify(msgs)}`);\n// \t\tmsgs.push({\n// \t\t\tfromSelf: true,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\tsetMessages(msgs);\n// \t\t// post message to db and emitting server\n// \t\t//console.log(\"sent Message :\" + JSON.stringify(msgs));\n// \t};\n\n// \tconst handleGroupMsg = async (msg) => {\n// \t\tawait axios.post(sendMessageGroup, {\n// \t\t\tfrom: currentUser._id,\n// \t\t\tto: currentChat.name,\n// \t\t\tmessages: msg,\n// \t\t});\n// \t\tconst msgs = [...messages];\n// \t\tconsole.log(`messages :${JSON.stringify(msgs)}`);\n// \t\tmsgs.push({\n// \t\t\tfromSelf: true,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\tsetGroupmessages(msgs);\n// \t};\n\n// \tconsole.log(`group messages : ${groupmessages}`);\n\n// \tuseEffect(() => {\n// \t\tif (socket.current) {\n// \t\t\tsocket.current.on(\"msg-recieved\", (msg) => {\n// \t\t\t\tsetArrivalMessage({\n// \t\t\t\t\tfromSelf: false,\n// \t\t\t\t\tmessage: msg,\n// \t\t\t\t});\n// \t\t\t});\n// \t\t}\n// \t}, []);\n\n// \tuseEffect(() => {\n// \t\tarrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\n// \t}, [arrivalMessage]);\n\n// \tuseEffect(() => {\n// \t\tarrivalGroupMessage &&\n// \t\t\tsetGroupmessages((prev) => [...prev, arrivalGroupMessage]);\n// \t}, [arrivalGroupMessage]);\n\n// \tuseEffect(() => {\n// \t\tscrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n// \t}, [messages]);\n\n// \tconsole.log(`arrivalgroup message :${arrivalGroupMessage}`);\n\n// \tlet chats = false;\n// \t//console.log(\"Group chat name : \" + JSON.stringify(groupChatName));\n// \t// for (let key in groupChatName) {\n// \t// \tconsole.log(`groupchat Name : ${groupChatName[key].name}`);\n// \t// }\n// \t//console.log(JSON.stringify(messages));\n// \t//console.log(`current chat data :  ${JSON.stringify(currentChat)}`);\n\n// \treturn (\n// \t\t<>\n// \t\t\t{chats\n// \t\t\t\t? currentChat && (\n// \t\t\t\t\t\t<Container>\n// \t\t\t\t\t\t\t<div className=\"chat-header\">\n// \t\t\t\t\t\t\t\t<div className=\"user-details\">\n// \t\t\t\t\t\t\t\t\t<div className=\"avatar\">\n// \t\t\t\t\t\t\t\t\t\t<img\n// \t\t\t\t\t\t\t\t\t\t\tsrc={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\n// \t\t\t\t\t\t\t\t\t\t\talt=\"avatar\"\n// \t\t\t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t<div className=\"username\">\n// \t\t\t\t\t\t\t\t\t\t<h3>{currentChat.username}</h3>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t<Logout />\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<div className=\"chat-messages\">\n// \t\t\t\t\t\t\t\t{messages.map((message) => {\n// \t\t\t\t\t\t\t\t\treturn (\n// \t\t\t\t\t\t\t\t\t\t<div ref={scrollRef} key={uuidv4()}>\n// \t\t\t\t\t\t\t\t\t\t\t<div\n// \t\t\t\t\t\t\t\t\t\t\t\tclassName={`message ${\n// \t\t\t\t\t\t\t\t\t\t\t\t\tmessage.fromSelf ? \"sended\" : \"recieved\"\n// \t\t\t\t\t\t\t\t\t\t\t\t}`}>\n// \t\t\t\t\t\t\t\t\t\t\t\t<div className=\"content \">\n// \t\t\t\t\t\t\t\t\t\t\t\t\t<p>{message.message}</p>\n// \t\t\t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t);\n// \t\t\t\t\t\t\t\t})}\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<ChatInput handleSendMsg={handleSendMsg} />\n// \t\t\t\t\t\t</Container>\n// \t\t\t\t  )\n// \t\t\t\t: groupChatName && (\n// \t\t\t\t\t\t<Container>\n// \t\t\t\t\t\t\t<div className=\"chat-header\">\n// \t\t\t\t\t\t\t\t<div className=\"user-details\">\n// \t\t\t\t\t\t\t\t\t<div className=\"avatar\">\n// \t\t\t\t\t\t\t\t\t\t<img\n// \t\t\t\t\t\t\t\t\t\t\tsrc={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\n// \t\t\t\t\t\t\t\t\t\t\talt=\"avatar\"\n// \t\t\t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t<div className=\"username\">\n// \t\t\t\t\t\t\t\t\t\t<h3>{currentChat.name}</h3>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t<Logout />\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<div className=\"chat-messages\">\n// \t\t\t\t\t\t\t\t{Object.keys(groupmessages).map((message) => {\n// \t\t\t\t\t\t\t\t\treturn (\n// \t\t\t\t\t\t\t\t\t\t<div ref={scrollRef} key={uuidv4()}>\n// \t\t\t\t\t\t\t\t\t\t\t<div\n// \t\t\t\t\t\t\t\t\t\t\t\tclassName={`message ${\n// \t\t\t\t\t\t\t\t\t\t\t\t\tmessage.fromSelf ? \"sended\" : \"recieved\"\n// \t\t\t\t\t\t\t\t\t\t\t\t}`}>\n// \t\t\t\t\t\t\t\t\t\t\t\t<div className=\"content \">\n// \t\t\t\t\t\t\t\t\t\t\t\t\t<p>{groupChatName.message}</p>\n// \t\t\t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t);\n// \t\t\t\t\t\t\t\t})}\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<ChatInput handleGroupMsg={handleGroupMsg} />\n// \t\t\t\t\t\t</Container>\n// \t\t\t\t  )}\n// \t\t</>\n// \t);\n// }\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport ChatInput from \"./ChatInput\";\nimport Logout from \"./Logout\";\nimport axios from \"axios\";\nimport {\n\tgetAllMessagesRoute,\n\tsendMessageRoute,\n\tallChats,\n\tsendMessageGroup,\n\tgroupchatmessage,\n} from \"../utils/APIRoutes\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default function ChatContainer({\n\tcurrentChat,\n\tcurrentUser,\n\tsocket,\n\tgroupChatName,\n\tactiveComponent,\n}) {\n\tconst [message, setMessages] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst fetchMessages = async () => {\n\t\t\tsetIsLoading(true);\n\t\t\tsetError(null);\n\n\t\t\ttry {\n\t\t\t\t//type - getAllMessagesRoute,\n\t\t\t\tconst response = await axios.post(`/api/${type}-chat-messages`);\n\t\t\t\tsetMessages(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tsetError(err);\n\t\t\t}\n\n\t\t\tsetIsLoading(false);\n\t\t};\n\n\t\tfetchMessages();\n\t}, [type]);\n\n\tuseEffect(() => {\n\t\tif (socket.current) {\n\t\t\tsocket.current.on(\"msg-recieved\", (msg) => {\n\t\t\t\tsetArrivalMessage({\n\t\t\t\t\tfromSelf: false,\n\t\t\t\t\tmessage: msg,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, []);\n\n\tconst handleMessageSubmit = async (event) => {\n\t\tevent.preventDefault();\n\t\tconst message = event.target.elements.message.value;\n\n\t\ttry {\n\t\t\tconst response = await axios.post(`/api/${type}-chat-messages`, {\n\t\t\t\tuser: currentUser,\n\t\t\t\tmessage,\n\t\t\t});\n\t\t\tsetMessages([...messages, response.data]);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\treturn <></>;\n}\n\nconst Container = styled.div`\n\tdisplay: grid;\n\tgrid-template-rows: 10% 80% 10%;\n\tgap: 0.1rem;\n\toverflow: hidden;\n\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n\t\tgrid-template-rows: 15% 70% 15%;\n\t}\n\t.chat-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 0 2rem;\n\t\t.user-details {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 1rem;\n\t\t\t.avatar {\n\t\t\t\timg {\n\t\t\t\t\theight: 3rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t.username {\n\t\t\t\th3 {\n\t\t\t\t\tcolor: white;\n\t\t\t\t\ttext-transform: capitalize;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t.chat-messages {\n\t\tpadding: 1rem 2rem;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1rem;\n\t\toverflow: auto;\n\t\t&::-webkit-scrollbar {\n\t\t\twidth: 0.2rem;\n\t\t\t&-thumb {\n\t\t\t\tbackground-color: #ffffff39;\n\t\t\t\twidth: 0.1rem;\n\t\t\t\tborder-radius: 1rem;\n\t\t\t}\n\t\t}\n\t\t.message {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\t.content {\n\t\t\t\tmax-width: 40%;\n\t\t\t\toverflow-wrap: break-word;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tfont-size: 1.1rem;\n\t\t\t\tborder-radius: 1rem;\n\t\t\t\tcolor: #d1d1d1;\n\t\t\t\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n\t\t\t\t\tmax-width: 70%;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.sended {\n\t\t\tjustify-content: flex-end;\n\t\t\t.content {\n\t\t\t\tbackground-color: #4f04ff21;\n\t\t\t}\n\t\t}\n\t\t.recieved {\n\t\t\tjustify-content: flex-start;\n\t\t\t.content {\n\t\t\t\tbackground-color: #9900ff20;\n\t\t\t}\n\t\t}\n\t}\n`;\n"],"mappingsgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACCC,mBADD,EAECC,gBAFD,EAGCC,QAHD,EAICC,gBAJD,EAKCC,gBALD,QAMO,oBANP;AAOA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;;AAEA,eAAe,SAASC,aAAT,OAMZ;EAAA;;EAAA,IANmC;IACrCC,WADqC;IAErCC,WAFqC;IAGrCC,MAHqC;IAIrCC,aAJqC;IAKrCC;EALqC,CAMnC;EACF,MAAM,CAACC,OAAD,EAAUC,WAAV,IAAyBrB,QAAQ,CAAC,EAAD,CAAvC;EACA,MAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACwB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACf,MAAMyB,aAAa,GAAG,YAAY;MACjCH,YAAY,CAAC,IAAD,CAAZ;MACAE,QAAQ,CAAC,IAAD,CAAR;;MAEA,IAAI;QACH;QACA,MAAME,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAN,CAAY,QAAOC,IAAK,gBAAxB,CAAvB;QACAR,WAAW,CAACM,QAAQ,CAACG,IAAV,CAAX;MACA,CAJD,CAIE,OAAOC,GAAP,EAAY;QACbN,QAAQ,CAACM,GAAD,CAAR;MACA;;MAEDR,YAAY,CAAC,KAAD,CAAZ;IACA,CAbD;;IAeAG,aAAa;EACb,CAjBQ,EAiBN,CAACG,IAAD,CAjBM,CAAT;EAmBA5B,SAAS,CAAC,MAAM;IACf,IAAIgB,MAAM,CAACe,OAAX,EAAoB;MACnBf,MAAM,CAACe,OAAP,CAAeC,EAAf,CAAkB,cAAlB,EAAmCC,GAAD,IAAS;QAC1CC,iBAAiB,CAAC;UACjBC,QAAQ,EAAE,KADO;UAEjBhB,OAAO,EAAEc;QAFQ,CAAD,CAAjB;MAIA,CALD;IAMA;EACD,CATQ,EASN,EATM,CAAT;;EAWA,MAAMG,mBAAmB,GAAG,MAAOC,KAAP,IAAiB;IAC5CA,KAAK,CAACC,cAAN;IACA,MAAMnB,OAAO,GAAGkB,KAAK,CAACE,MAAN,CAAaC,QAAb,CAAsBrB,OAAtB,CAA8BsB,KAA9C;;IAEA,IAAI;MACH,MAAMf,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAN,CAAY,QAAOC,IAAK,gBAAxB,EAAyC;QAC/Dc,IAAI,EAAE3B,WADyD;QAE/DI;MAF+D,CAAzC,CAAvB;MAIAC,WAAW,CAAC,CAAC,GAAGuB,QAAJ,EAAcjB,QAAQ,CAACG,IAAvB,CAAD,CAAX;IACA,CAND,CAME,OAAON,KAAP,EAAc;MACfqB,OAAO,CAACrB,KAAR,CAAcA,KAAd;IACA;EACD,CAbD;;EAeA,oBAAO,qCAAP;AACA;;GAzDuBV,a;;KAAAA,a;AA2DxB,MAAMgC,SAAS,GAAG3C,MAAM,CAAC4C,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxEA"},"metadata":{},"sourceType":"module"}